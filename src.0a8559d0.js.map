{"version":3,"sources":["src/RedditService.js","src/targets.js","node_modules/mustache/mustache.js","src/StoryManager.js","src/index.js"],"names":["RedditService","constructor","url","baseUrl_","pages_","currentPage_","nextPage","length","prevPage","getUrl_","after","fetch","req","resp","json","push","data","children","map","i","o","author","title","permalink","id","index","is_video","media","reddit_video","Object","assign","extractVideo_","startsWith","guessVideo_","extractImage_","extractGfycat_","filter","e","image","video","gfycat","width","thumbnail_width","height","thumbnail_height","src","match","poster","getPoster_","fallback","fallback_url","hls","hls_url","dash","dash_url","preview","images","source","replace","targets","defaultTarget","template","Mustache","parse","StoryManager","container","iframe","next","prev","link","container_","iframe_","link_","update_","bind","onNextClick_","onPrevClick_","onStoryPageChange_","window","addEventListener","event","preventDefault","irl","render_","currentPage","getAttribute","itemMap_","get","textContent","setAttribute","location","hash","target_","className","display_","items","page","render","taget","canonical","href","Map","blob","Blob","type","URL","createObjectURL","createIframe_","prepend","Promise","resolve","revokeObjectURL","removeChild","style","display","registerPageChange_","callback","story","contentDocument","querySelector","MutationObserver","mutations","current","m","target","find","t","tagName","hasAttribute","observe","subtree","attributeFilter","document","createElement","load","findElements","scrollTo","readyState"],"mappings":"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","file":"src.0a8559d0.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class RedditService {\n  constructor(url) {\n    this.baseUrl_ = url;\n    this.pages_ = [''];\n    this.currentPage_ = 0;\n  }\n\n  nextPage() {\n    if (this.currentPage_ === this.pages_.length - 1) {\n      return false;\n    }\n    this.currentPage_++;\n    return true;\n  }\n\n  prevPage() {\n    if (this.currentPage_ === 0) {\n      return false;\n    }\n    this.currentPage_--;\n    return true;\n  }\n\n  getUrl_() {\n    const after = this.pages_[this.currentPage_];\n    return `${this.baseUrl_}?after=${after}`;\n  }\n\n  async fetch() {\n    const req = await fetch(this.getUrl_());\n    const resp = await req.json();\n    if (this.currentPage_ === this.pages_.length - 1) {\n      this.pages_.push(resp.data.after);\n    }\n    return resp.data.children\n      .map(({ data }, i) => {\n        const o = {\n          url: data.url,\n          author: data.author,\n          title: data.title,\n          permalink: 'https://reddit.com' + data.permalink,\n          id: data.id,\n          index: i + 1\n        };\n        if (data.is_video && data.media.reddit_video) {\n          Object.assign(o, this.extractVideo_(data));\n        } else if (data.url.startsWith('https://v.redd.it/')) {\n          Object.assign(o, this.guessVideo_(data));\n        } else if (data.url.startsWith('https://i.redd.it/')) {\n          Object.assign(o, this.extractImage_(data));\n        } else if (data.url.startsWith('https://gfycat.com/')) {\n          Object.assign(o, this.extractGfycat_(data));\n        }\n        return o;\n      })\n      .filter(e => e.image || e.video || e.gfycat);\n  }\n\n  extractImage_(data) {\n    return {\n      image: {\n        width: data.thumbnail_width,\n        height: data.thumbnail_height,\n        src: data.url\n      }\n    };\n  }\n\n  extractGfycat_(data) {\n    const match = data.url.match(/^https:\\/\\/gfycat\\.com\\/([^\\/]+)/);\n    if (!match) {\n      return {};\n    }\n    return {\n      gfycat: {\n        width: data.thumbnail_width,\n        height: data.thumbnail_height,\n        id: match[1]\n      }\n    };\n  }\n\n  extractVideo_(data) {\n    return {\n      video: {\n        poster: this.getPoster_(data),\n        src: {\n          fallback: data.media.reddit_video.fallback_url,\n          hls: data.media.reddit_video.hls_url,\n          dash: data.media.reddit_video.dash_url\n        }\n      }\n    };\n  }\n\n  guessVideo_(data) {\n    return {\n      video: {\n        poster: this.getPoster_(data),\n        src: {\n          fallback: `${data.url}/DASH_480?source=fallback`,\n          hls: `${data.url}/HLSPlaylist.m3u8`,\n          dash: `${data.url}/DASHPlaylist.mpd`\n        }\n      }\n    };\n  }\n\n  getPoster_(data) {\n    if (!data.preview || !data.preview.images) {\n      return;\n    }\n    return data.preview.images[0].source.url.replace(/&amp;/g, '&');\n  }\n}\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const targets = {\n  '#me': {\n    url: 'https://www.reddit.com/r/me_irl.json',\n    title: 'me_irl'\n  },\n  '#new': {\n    url: 'https://www.reddit.com/r/me_irl/new.json',\n    title: 'me_irl'\n  },\n  '#meow': {\n    url: 'https://www.reddit.com/r/MEOW_IRL.json',\n    title: 'meow_irl'\n  },\n  '#woof': {\n    url: 'https://www.reddit.com/r/woof_irl.json',\n    title: 'woof_irl'\n  }\n};\n\nexport const defaultTarget = '#meow';\n","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var tokens = cache[cacheKey];\n\n    if (tokens == null)\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      return this.renderTokens(this.parse(indentedValue, tags), context, partials, indentedValue);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '3.1.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport RedditService from './RedditService';\nimport { targets, defaultTarget } from './targets';\nimport Mustache from 'mustache';\nimport fs from 'fs';\n\nconst template = fs.readFileSync('./src/template.html', 'utf8');\nMustache.parse(template);\n\nexport default class StoryManager {\n  constructor({ container, iframe, next, prev, link }) {\n    this.container_ = container;\n    this.iframe_ = null;\n    this.link_ = link;\n\n    this.update_ = this.update_.bind(this);\n    this.onNextClick_ = this.onNextClick_.bind(this);\n    this.onPrevClick_ = this.onPrevClick_.bind(this);\n    this.onStoryPageChange_ = this.onStoryPageChange_.bind(this);\n\n    window.addEventListener('hashchange', this.update_);\n    next.addEventListener('click', this.onNextClick_);\n    prev.addEventListener('click', this.onPrevClick_);\n    this.update_();\n  }\n\n  onNextClick_(event) {\n    event.preventDefault();\n    if (this.irl.nextPage()) {\n      this.render_();\n    }\n  }\n\n  onPrevClick_(event) {\n    event.preventDefault();\n    if (this.irl.prevPage()) {\n      this.render_();\n    }\n  }\n\n  onStoryPageChange_(currentPage) {\n    const id = currentPage.getAttribute('data-reddit-id');\n    const { title, permalink } = this.itemMap_.get(id);\n    this.link_.textContent = `🔗 ${title}`;\n    this.link_.setAttribute('href', permalink);\n  }\n\n  async update_() {\n    if (!targets[window.location.hash]) {\n      window.location.hash = defaultTarget;\n    }\n    this.target_ = targets[window.location.hash];\n    this.container_.className = '';\n    await this.display_();\n    this.container_.className = 'loaded';\n  }\n\n  async display_() {\n    this.irl = new RedditService(this.target_.url);\n    await this.render_();\n  }\n\n  async render_() {\n    const items = await this.irl.fetch();\n    const page = Mustache.render(template, {\n      taget: this.target_.title,\n      canonical: window.location.href,\n      items\n    });\n    this.itemMap_ = new Map(items.map(e => [e.id, e]));\n    const blob = new Blob([page], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n\n    const iframe = this.createIframe_();\n    iframe.setAttribute('src', url);\n    this.container_.prepend(iframe);\n\n    await new Promise(resolve => iframe.addEventListener('load', resolve));\n    URL.revokeObjectURL(url);\n\n    if (this.iframe_) {\n      this.container_.removeChild(this.iframe_);\n    }\n    this.iframe_ = iframe;\n    iframe.style.display = '';\n\n    this.registerPageChange_(this.onStoryPageChange_);\n  }\n\n  registerPageChange_(callback) {\n    const story = this.iframe_.contentDocument.querySelector('amp-story');\n    const observer = new MutationObserver(mutations => {\n      const current = mutations\n        .map(m => m.target)\n        .find(t => t.tagName === 'AMP-STORY-PAGE' && t.hasAttribute('active'));\n      if (current) {\n        callback(current);\n      }\n    });\n    observer.observe(story, { subtree: true, attributeFilter: ['active'] });\n  }\n\n  createIframe_() {\n    const iframe = document.createElement('iframe');\n    iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n    iframe.style.display = 'none';\n    return iframe;\n  }\n}\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StoryManager from './StoryManager';\n\nasync function load() {\n  new StoryManager(findElements());\n  window.scrollTo(0, 1);\n}\n\nfunction findElements() {\n  return {\n    container: document.querySelector('#container'),\n    iframe: document.querySelector('#story'),\n    next: document.querySelector('#next'),\n    prev: document.querySelector('#prev'),\n    link: document.querySelector('#link')\n  };\n}\n\nif (\n  document.readyState === 'complete' ||\n  document.readyState === 'interactive'\n) {\n  load();\n} else {\n  document.addEventListener('DOMContentLoaded', load);\n}\n"]}